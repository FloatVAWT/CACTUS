# This makefile is constructed for GNU make - 4/00.
# Meant for use with a project using modules (with module code in MODDIR)
SRCDIR = ..\src\
MODDIR = ..\src\mod
MODUTILDIR = ..\src\mod\util
BINDIR =  ..\bin

.SUFFIXES: .f95
.SILENT:

# split f95, and module lists... Modules need to be compiled first
# split into f95, and module lists... Modules need to be compiled first
#
# In windows wildcards don't work, need to explicitly define objects
OBJf95 = \
$(SRCDIR)AeroCoeffs.obj \
$(SRCDIR)BGeomSetup.obj \
$(SRCDIR)BladeIndVel.obj \
$(SRCDIR)BladeLoads.obj \
$(SRCDIR)bsload.obj \
$(SRCDIR)BV_DynStall.obj \
$(SRCDIR)CACTUS.obj \
$(SRCDIR)CalcBladeVel.obj \
$(SRCDIR)CalcFreestream.obj \
$(SRCDIR)CalcIndVel.obj \
$(SRCDIR)conlp.obj \
$(SRCDIR)EndRev.obj \
$(SRCDIR)EndTS.obj \
$(SRCDIR)input.obj \
$(SRCDIR)InputGeom.obj \
$(SRCDIR)LB_DynStall.obj \
$(SRCDIR)RotateTurbine.obj \
$(SRCDIR)SetBoundWake.obj \
$(SRCDIR)SGeomSetup.obj \
$(SRCDIR)shedvor.obj \
$(SRCDIR)UpdateBladeVel.obj \
$(SRCDIR)UpdateStrutLoads.obj \
$(SRCDIR)UpdateTowerVelocity.obj \
$(SRCDIR)UpdateWakeVel.obj \
$(SRCDIR)UpdateWall.obj \
$(SRCDIR)VorIVel.obj \
$(SRCDIR)WGeomSetup.obj \
$(SRCDIR)WriteFinalOutput.obj \
$(SRCDIR)WriteRegTOutput.obj \
$(SRCDIR)WriteWakeData.obj \
$(SRCDIR)WriteWallData.obj \
$(SRCDIR)WSolnSetup.obj

OBJMODf95 =  \
$(MODDIR)airfoil.obj \
$(MODDIR)blade.obj \
$(MODDIR)compiler.obj \
$(MODDIR)configr.obj \
$(MODDIR)dystl.obj \
$(MODDIR)element.obj \
$(MODDIR)fnames.obj \
$(MODDIR)iecgust.obj \
$(MODDIR)output.obj \
$(MODDIR)parameters.obj \
$(MODDIR)pidef.obj \
$(MODDIR)probesystem.obj \
$(MODDIR)quadsourcepanel.obj \
$(MODDIR)regtest.obj \
$(MODDIR)shear.obj \
$(MODDIR)strut.obj \
$(MODDIR)time.obj \
$(MODDIR)tower.obj \
$(MODDIR)uobj \
$(MODDIR)varscale.obj \
$(MODDIR)vortex.obj \
$(MODDIR)wake.obj \
$(MODDIR)wakedata.obj \
$(MODDIR)wallgeom.obj \
$(MODDIR)wallsoln.obj \
$(MODDIR)wallsystem.obj

OBJMODUTILf95 = \
$(MODUTILDIR)util.obj \
$(MODUTILDIR)vecutils.obj \
$(MODUTILDIR)geomutils.obj \
$(MODUTILDIR)plot3d.obj

# no such files
#INC = $(wildcard $(SRCDIR)/*.inc)



# for debugging, debug flag and detailed runtime error checking.
#FLAGS = /nologo /debug /CB /real-size:64
# standard compiler optimization
FLAGS = /nologo /O2 /real-size:64
# No compiler optimization
#FLAGS = /nologo /rreal-size:64

# includes in SRCDIR, .mod files in MODDIR
OPT = /I$(SRCDIR) /I$(MODDIR) /I$(MODUTILDIR) $(FLAGS)
LINKOPT = $(FLAGS)

# Include windows LAPACK.lib and BLAS.lib for LAPACK calculations
!IF "$(C_TARGET_ARCH)" == "intel64"
!MESSAGE 64 bit environment
LIBDIR = ..\lib\x64\
!ELSEIF "$(C_TARGET_ARCH)" == "ia32"
!MESSAGE 32 bit environment
LIBDIR = ..\lib\win32\
!ENDIF

LIBS = /link $(LIBDIR)LAPACK.lib $(LIBDIR)BLAS.lib

COMPILER = ifort


# Primary goal: create executable from object files if object files have changed. Depends on OBJMODUTIL, OBJMOD, and OBJ
# Note: Generally, fortran  modules must come first in the compile list... Also, if a module depends on another module in fortran,
# this module must be compiled first so that the subsequent module can see it's .mod file during compile. This appears to be due to the fact that
# the .mod file performs some external function prototyping for the module functions, and since the .mod is autogenerated when a module is compiled,
# these prototypes cant be explicitly included a-priori in the code that uses the module (ala .h files in C). Modules used in
# other modules must be compiled first...
$(BINDIR)/cactus : $(OBJMODUTILf95) $(OBJMODf95) $(OBJf95)
	echo $(COMPILER) /o $@ $(LINKOPT) $(OBJMODUTILf95) $(OBJMODf95) $(OBJf95)  $(LIBS)
	$(COMPILER) /o $@ $(LINKOPT) $(OBJMODUTILf95) $(OBJMODf95) $(OBJf95)  $(LIBS)

# Secondary goals: rules for OBJ. If Makefile or include files are changed, update
#$(OBJMODUTILf95) $(OBJMODf95) $(OBJf95) : Makefile $(INC)
#	echo "done 1" $* $@

# Further secondary goals for OBJ: If individual source files are changed, update the corresponding OBJ
{$(MODUTILDIR)}.f95{$(MODUTILDIR)}.obj:
	echo ----Compiling source $< to produce $@
	@$(COMPILER) $(OPT) /module:$(MODUTILDIR) /c /free /Tf $< /o $@

{$(MODDIR)}.f95{$(MODDIR)}.obj:
	echo ----Compiling source $< to produce $@
	@$(COMPILER) $(OPT) /module:$(MODDIR) /c /free /Tf $< /o $@

{$(SRCDIR)}.f95{$(SRCDIR)}.obj:
	echo ----Compiling source $< to produce $@
	@$(COMPILER) $(OPT) /c /free /Tf $< /o $@

clean :
	del $(SRCDIR)*.obj
	del $(MODDIR)*.obj
	del $(MODDIR)*.mod
	del $(MODUTILDIR)*.obj
	del $(MODUTILDIR)*.mod
